/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CS305_Asg_1;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import java.sql.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Field;

interface SqlRunner{
    public Object selectOne(String queryId, Object queryParam[], Class<?> resultType);
    public List<?> selectMany(String queryId, Object queryParam[], Class<?> resultType);
    public int update(String queryId, Object queryParam[]);
    public int insert(String queryId, Object queryParam[]);
    public int delete(String queryId, Object queryParam[]);
}

public class Main implements SqlRunner{
    public static void main(String[] args) {

        // Object[] queryParam = new Object[]{2};
        
        // Main t1 = new Main();
        // String queryId = "findActor";
        
        // class xyz{
        //     String first_name;
        // }
        // xyz x1 = new xyz();
        // Class<?> c1 = x1.getClass();

        // Object o1 = t1.selectOne(queryId, queryParam, c1);
        // xyz type_casted_o1 = (xyz) o1;
        // System.out.println(type_casted_o1.first_name);

        

        // class xyz{
        //     String first_name;
        //     String last_name;
        // }
        // xyz x1 = new xyz();
        // Class c1 = x1.getClass();
        // List<?> list = t1.selectMany(queryId, queryParam, c1);
        // for(Object lang:list){
        //     xyz type_casted_o1 = (xyz) lang;
        //     System.out.println(type_casted_o1.first_name + " " + type_casted_o1.last_name);
        // }
        
        // t1.selectMany(queryId, queryParam, c1);

        // t1.insert(queryId, queryParam);
        // t1.update(queryId, queryParam);
        // t1.delete(queryId, queryParam);

    }
    public String parser(String queryId){
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new File("C:/Users/Asus/Desktop/CS305_Asg_1/app/src/main/resources/queries.xml"));

            document.getDocumentElement().normalize();

            NodeList queryList = document.getElementsByTagName("sql");
            for (int i = 0; i <queryList.getLength(); i++) {
                Node qry = queryList.item(i);
                if(qry.getNodeType() == Node.ELEMENT_NODE) {

                    Element qryElement = (Element) qry;
                    if (queryId.equals(qryElement.getAttribute("id"))){
                        String str = "";
                        str = (qryElement.getTextContent()).trim();
                        return str;
                    }
                }
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Connection getConnection(){
        String url = "jdbc:mysql://localhost:3306/sakila";
        String username = "root";
        String password = "abhi";
        
        String driver = "com.mysql.cj.jdbc.Driver";
        try{
            Class.forName(driver);
            Connection conn = DriverManager.getConnection(url,username,password);
            return conn;
        }
        catch(Exception e){
            System.out.println(e);
        }
        return null;
    }

    public Object selectOne(String queryId, Object queryParam[], Class<?> resultType){
        Main i1 = new Main();
        String qry = i1.parser(queryId); // Storing query corresponding to the queryId
        
        // Populate the query using the given parameters.
        for(Object o: queryParam){
            String ss = o.toString();
            qry = qry.replaceFirst("\\$\\{[a-zA-Z]*\\}",ss);
        }

        Object objt = null; 
        try{
            
            // Calling function to get connection with JDBC
            Connection con = getConnection();
            Statement statement = con.createStatement();
            ResultSet result = statement.executeQuery(qry);
            ResultSetMetaData meta_data = result.getMetaData();
            int num_columns = meta_data.getColumnCount();

            Class<?> class_name = Class.forName(resultType.getName());
            objt = (Object) class_name.getDeclaredConstructor().newInstance();
            Class<?> ob_class = objt.getClass();

            String col_name;
            String col_val;
            while (result.next()){
                col_name = "";
                col_val = "";
                for (int i = 1;i <= num_columns;i++){
                    col_name = meta_data.getColumnName(i);
                    col_val = result.getString(i);
                    Field field = ob_class .getDeclaredField(col_name);
                    field.set(objt,col_val);
                }
            }
            con.close();
            return objt;
        }
        catch (Exception e){
            System.out.println(e);
        }
        return objt;
    }

    public List<?> selectMany(String queryId, Object queryParam[], Class<?> resultType){
        Main i1 = new Main();
        String qry = i1.parser(queryId);
        for(Object o: queryParam){
            String ss = o.toString();
            qry = qry.replaceFirst("\\$\\{[a-zA-Z]*\\}",ss);
        }
        System.out.println(qry);
        Object objt = null; 
        List<Object> obj_list = new ArrayList<Object>();
        try{
            Connection con = getConnection();
            Statement statement = con.createStatement();
            ResultSet result = statement.executeQuery(qry);
            ResultSetMetaData meta_data = result.getMetaData();
            int num_columns = meta_data.getColumnCount();

            String col_name;
            String col_val;
            while (result.next()){
                col_name = "";
                col_val = "";

                Class<?> class_name = Class.forName(resultType.getName());
                objt = (Object) class_name.getDeclaredConstructor().newInstance();
                Class<?> ob_class = objt.getClass();

                for (int i = 1;i <= num_columns;i++){
                    col_name = meta_data.getColumnName(i);
                    col_val = result.getString(i);
                    Field field = ob_class .getDeclaredField(col_name);
                    field.set(objt,col_val);
                }
                obj_list.add(objt);
            }
            con.close();
            return obj_list;
        }
        catch (Exception e){
            System.out.println(e);
        }
        return obj_list;
    }

    public int insert(String queryId, Object queryParam[]){
        Main i1 = new Main();
        String qry = i1.parser(queryId);
        int num_rows_aff = 0;
        for(Object o: queryParam){
            //System.out.println(o);
            String ss = o.toString();
            qry = qry.replaceFirst("\\$\\{[a-zA-Z]*\\}",ss);
        }

        try{
            Connection con = getConnection();
            Statement statement = con.createStatement();
            num_rows_aff = statement.executeUpdate(qry);
            con.close();
            return num_rows_aff;
        }
        catch (Exception e){
            System.out.println(e);
        }
        return 0;
    }

    public int update(String queryId, Object queryParam[]){
        Main i1 = new Main();
        String qry = i1.parser(queryId);
        int num_rows_aff = 0;
        for(Object o: queryParam){
            //System.out.println(o);
            String ss = o.toString();
            qry = qry.replaceFirst("\\$\\{[a-zA-Z]*\\}",ss);
        }

        try{
            Connection con = getConnection();
            Statement statement = con.createStatement();
            num_rows_aff = statement.executeUpdate(qry);
            con.close();
            return num_rows_aff;
        }
        catch (Exception e){
            System.out.println(e);
        }
        return 0;
    }

    public int delete(String queryId, Object queryParam[]){
        Main i1 = new Main();
        String qry = i1.parser(queryId);
        int num_rows_aff = 0;
        for(Object o: queryParam){
            //System.out.println(o);
            String ss = o.toString();
            qry = qry.replaceFirst("\\$\\{[a-zA-Z]*\\}",ss);
        }

        try{
            Connection con = getConnection();
            Statement statement = con.createStatement();
            num_rows_aff = statement.executeUpdate(qry);
            con.close();
            return num_rows_aff;
        }
        catch (Exception e){
            System.out.println(e);
        }
        return 0;
    }
}
class xyz{
    String first_name;
}
class pq{
    String last_name;
}

